package {{.Main.PkgName}}_test

import (
	"bytes"
	gctx "context"
	"encoding/json"
	"fmt"
	"io"
	"testing"

	pkg {{quote .PkgPath}}
	"context"
	"github.com/influx6/faux/tests"
	"github.com/influx6/shogun/internals"
	"github.com/influx6/shogun/internals/kensho"

{{ range $_, $elem := .Main.Functions }}{{range $path, $nick := .Imports }}
  {{$nick}} {{quote $path}}
{{end}}{{end}}
)

{{ range $_, $elem := .Main.Functions }}{{range $elem.List}}
{{if hasArgumentStructUnexported .StructExported }}
func Test{{capitalize .Name}}(t *testing.T){
	tests.Errored(`Unable to generate tests for {{quote .RealName}} due to unexported argument {{quote .Imports.Type}}`)
}
{{else}}
{{if hasNoArgument .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  kensho.TestNoArgumentFunction(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}
{{end}}
{{if hasContextArgument .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  kensho.TestNoArgumentFunction(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}
{{end}}
{{if hasStringArgument .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  kensho.TestStringFunction(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}
{{end}}
{{if hasMapArgument .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  kensho.TestMapFunction(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}
{{end}}
{{if hasReadArgument .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  kensho.TestReaderFunction(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}
{{end}}
{{if hasWriteArgument .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  kensho.TestWriterFunction(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}
{{end}}
{{if hasStringArgumentWithWriter .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  kensho.TestStringWithWriterFunction(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}
{{end}}
{{if hasReadArgumentWithWriter .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  kensho.TestReaderWithWriterFunction(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}
{{end}}
{{if hasMapArgumentWithWriter .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  kensho.TestMapWithWriterFunction(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}
{{end}}
{{if hasStructArgument .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  test{{.Name}}Function(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}

func test{{.Name}}Function(fun internals.ShogunFunc) {
	var err error

	defer func() {
		if rec := recover(); rec != nil {
			switch drec := rec.(type) {
			case error:
				err = drec
			default:
				err = fmt.Errorf("Recover Error: %+q", rec)
			}
		}
	}()

	var incoming bytes.Buffer
	incoming.WriteString(`{"name":"Rock"}`)

	realFunc := fun.Function.(func({{.Imports.Type}}))
	realGCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}))
	realFCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}))
	realCnFCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}))

	realFuncWithReturn := fun.Function.(func({{.Imports.Type}}) error)
	realGCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}) error)
	realFCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}) error)
	realCnFCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}) error)

  {{if hasPrefix .Imports.Type "*"}}
  var data {{ trimPrefix .Imports.Type "*"}}
  {{else}}
  var data {{.Imports.Type}}
  {{end}}
	if jserr := json.NewDecoder(&incoming).Decode(&data); jserr != nil {
		tests.Failed("Function %q with alias %q failed StringOnlyFunction criterias: %+q", fun.Name, fun.NS, jserr)
		return
	}

	switch fun.Context {
	case internals.NoContext:
		if fun.Return == internals.NoReturn {
			realFunc({{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
		}

		if fun.Return == internals.ErrorReturn {
			err = realFuncWithReturn({{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
		}
	case internals.UseGoogleContext:
		err = execWithContext(func(ctx context.Context) error {
			if fun.Return == internals.NoReturn {
				realGCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
			}

			if fun.Return == internals.ErrorReturn {
				err = realGCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
			}

			return nil
		}, 0)
	case internals.UseFauxContext:
		err = execWithContext(func(ctx context.Context) error {
			if fun.Return == internals.NoReturn {
			if realCnFCtxFunc != nil {
					realCnFCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
			}

			if realFCtxFunc != nil {
					realFCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
			}
			}

			if fun.Return == internals.ErrorReturn {
				if realFCtxFuncWithReturn != nil {
					err = realFCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
				}

				if realCnFCtxFuncWithReturn != nil {
					err = realCnFCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
				}
			}

			return nil
		}, 0)
	}

	if err != nil {
		tests.Failed("Function %q with alias %q failed StructFunction criterias: %+q", fun.Name, fun.NS, err)
		return
	}

	tests.Passed("Function %q with alias %q passes StructFunction criterias", fun.Name, fun.NS)
	return
}
{{end}}
{{if hasImportedArgument .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  test{{.Name}}Function(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}

func test{{.Name}}Function(fun internals.ShogunFunc) {
	var err error

	defer func() {
		if rec := recover(); rec != nil {
			switch drec := rec.(type) {
			case error:
				err = drec
			default:
				err = fmt.Errorf("Recover Error: %+q", rec)
			}
		}
	}()

	var incoming bytes.Buffer
	incoming.WriteString(`{"name":"Rock"}`)

	realFunc := fun.Function.(func({{.Imports.Type}}))
	realGCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}))
	realFCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}))
	realCnFCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}))

	realFuncWithReturn := fun.Function.(func({{.Imports.Type}}) error)
	realGCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}) error)
	realFCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}) error)
	realCnFCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}) error)

  {{if hasPrefix .Imports.Type "*"}}
  var data {{ trimPrefix .Imports.Type "*"}}
  {{else}}
  var data {{.Imports.Type}}
  {{end}}
	if jserr := json.NewDecoder(&incoming).Decode(&data); jserr != nil {
		tests.Failed("Function %q with alias %q failed StringOnlyFunction criterias: %+q", fun.Name, fun.NS, jserr)
		return
	}

	switch fun.Context {
	case internals.NoContext:
		if fun.Return == internals.NoReturn {
			realFunc({{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
		}

		if fun.Return == internals.ErrorReturn {
			err = realFuncWithReturn({{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
		}
	case internals.UseGoogleContext:
		err = execWithContext(func(ctx context.Context) error {
			if fun.Return == internals.NoReturn {
				realGCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
			}

			if fun.Return == internals.ErrorReturn {
				err = realGCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
			}

			return nil
		}, 0)
	case internals.UseFauxContext:
		err = execWithContext(func(ctx context.Context) error {
			if fun.Return == internals.NoReturn {
				if realCnFCtxFunc != nil {
						realCnFCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
				}

				if realFCtxFunc != nil {
						realFCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
				}
			}

			if fun.Return == internals.ErrorReturn {
				if realFCtxFuncWithReturn != nil {
					err = realFCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
				}

				if realCnFCtxFuncWithReturn != nil {
					err = realCnFCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}})
				}
			}

			return nil
		}, 0)
	}

	if err != nil {
		tests.Failed("Function %q with alias %q failed StructFunction criterias: %+q", fun.Name, fun.NS, err)
		return
	}

	tests.Passed("Function %q with alias %q passes StructFunction criterias", fun.Name, fun.NS)
	return
}
{{end}}
{{if hasStructArgumentWithWriter .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  test{{.Name}}Function(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}

func test{{capitalize .Name}}WithWriterFunction(fun internals.ShogunFunc) {
	var err error

	defer func() {
		if rec := recover(); rec != nil {
			switch drec := rec.(type) {
			case error:
				err = drec
			default:
				err = fmt.Errorf("Recover Error: %+q", rec)
			}
		}
	}()

	var incoming, outgoing bytes.Buffer
	incoming.WriteString(`{"name":"Rock"}`)

	realFunc := fun.Function.(func({{.Imports.Type}}, io.WriteCloser))
	realGCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser))
	realFCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser))
	realCnFCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser))

	realFuncWithReturn := fun.Function.(func({{.Imports.Type}}, io.WriteCloser) error)
	realGCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser) error)
	realFCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser) error)
	realCnFCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser) error)

  {{if hasPrefix .Imports.Type "*"}}
  var data {{ trimPrefix .Imports.Type "*"}}
  {{else}}
  var data {{.Imports.Type}}
  {{end}}
	if jserr := json.NewDecoder(&incoming).Decode(&data); jserr != nil {
		tests.Failed("Function %q with alias %q failed StringOnlyFunction criterias: %+q", fun.Name, fun.NS, jserr)
		return
	}

	switch fun.Context {
	case internals.NoContext:
		if fun.Return == internals.NoReturn {
			realFunc({{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
		}

		if fun.Return == internals.ErrorReturn {
			err = realFuncWithReturn({{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
		}
	case internals.UseGoogleContext:
		err = execWithContext(func(ctx context.Context) error {
			if fun.Return == internals.NoReturn {
				realGCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
			}

			if fun.Return == internals.ErrorReturn {
				err = realGCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
			}

			return nil
		}, 0)
	case internals.UseFauxContext:
		err = execWithContext(func(ctx context.Context) error {
			if fun.Return == internals.NoReturn {
				if realCnFCtxFunc != nil {
						realCnFCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
				}

				if realFCtxFunc != nil {
						realFCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
				}
			}

			if fun.Return == internals.ErrorReturn {
				if realFCtxFuncWithReturn != nil {
					err = realFCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
				}

				if realCnFCtxFuncWithReturn != nil {
					err = realCnFCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
				}
			}

			return nil
		}, 0)
	}

	if err != nil {
		tests.Failed("Function %q with alias %q failed StringOnlyFunction criterias: %+q", fun.Name, fun.NS, err)
		return
	}

	if outgoing.Len() == 0 {
		tests.Failed("Function %q with alias %q should have responded with output", fun.Name, fun.NS)
	}

	tests.Passed("Function %q with alias %q passes StringOnlyFunction criterias", fun.Name, fun.NS)
	return
}
{{end}}
{{if hasImportedArgumentWithWriter .Type }}
func Test{{capitalize .Name}}(t *testing.T){
  test{{.Name}}Function(internals.ShogunFunc{
    Context: {{.Context}},
    Type: {{.Type}},
    Return: {{.Return}},
    NS: {{quote .Name}},
    Function: pkg.{{.RealName}},
    Name: {{quote .RealName}},
    Source: `{{.Source}}`,
    Flags: internals.Flags{
      {{range .Flags}}
        {
          EnvVar: {{quote .EnvVar}},
          Name: {{quote .Name}},
          Desc: {{quote .Desc}},
          Type: internals.FlagType({{.Type.Int}}),
        },
      {{end}}
    },
  })
}

func test{{capitalize .Name}}WithWriterFunction(fun internals.ShogunFunc) {
	var err error

	defer func() {
		if rec := recover(); rec != nil {
			switch drec := rec.(type) {
			case error:
				err = drec
			default:
				err = fmt.Errorf("Recover Error: %+q", rec)
			}
		}
	}()

	var incoming, outgoing bytes.Buffer
	incoming.WriteString(`{"name":"Rock"}`)

	realFunc := fun.Function.(func({{.Imports.Type}}, io.WriteCloser))
	realGCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser))
	realFCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser))
	realCnFCtxFunc := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser))

	realFuncWithReturn := fun.Function.(func({{.Imports.Type}}, io.WriteCloser) error)
	realGCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser) error)
	realFCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser) error)
	realCnFCtxFuncWithReturn := fun.Function.(func(context.Context, {{.Imports.Type}}, io.WriteCloser) error)

  {{if hasPrefix .Imports.Type "*"}}
  var data {{ trimPrefix .Imports.Type "*"}}
  {{else}}
  var data {{.Imports.Type}}
  {{end}}
	if jserr := json.NewDecoder(&incoming).Decode(&data); jserr != nil {
		tests.Failed("Function %q with alias %q failed StringOnlyFunction criterias: %+q", fun.Name, fun.NS, jserr)
		return
	}

	switch fun.Context {
	case internals.NoContext:
		if fun.Return == internals.NoReturn {
			realFunc({{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
		}

		if fun.Return == internals.ErrorReturn {
			err = realFuncWithReturn({{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
		}
	case internals.UseGoogleContext:
		err = execWithContext(func(ctx context.Context) error {
			if fun.Return == internals.NoReturn {
				realGCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
			}

			if fun.Return == internals.ErrorReturn {
				err = realGCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
			}

			return nil
		}, 0)
	case internals.UseFauxContext:
		err = execWithContext(func(ctx context.Context) error {
			if fun.Return == internals.NoReturn {
				if realCnFCtxFunc != nil {
					realCnFCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
				}

				if realFCtxFunc != nil {
					realFCtxFunc(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
				}
			}

			if fun.Return == internals.ErrorReturn {
				if realFCtxFuncWithReturn != nil {
					err = realFCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
				}

				if realCnFCtxFuncWithReturn != nil {
					err = realCnFCtxFuncWithReturn(ctx, {{if hasPrefix .Imports.Type "*"}}&data{{else}}data{{end}}, wopCloser{Writer: &outgoing})
				}
			}

			return nil
		}, 0)
	}

	if err != nil {
		tests.Failed("Function %q with alias %q failed StringOnlyFunction criterias: %+q", fun.Name, fun.NS, err)
		return
	}

	if outgoing.Len() == 0 {
		tests.Failed("Function %q with alias %q should have responded with output", fun.Name, fun.NS)
	}

	tests.Passed("Function %q with alias %q passes StringOnlyFunction criterias", fun.Name, fun.NS)
	return
}
{{end}}
{{end}}
{{end}}
{{end}}

func execWithContext(fun interface{}, ctxTimeout time.Duration) error {
	switch dfunc := fun.(type) {
	case func(context.Context) error:
		var ctx context.Context

		if ctxTimeout == 0 {
			ctx = context.NewCnclContext(nil)
		} else {
			ctx = context.NewExpiringCnclContext(nil, ctxTimeout, nil)
		}

		defer ctx.Cancel()

		return dfunc(ctx)
	case func(context.Context) error:
		var ctx context.Context

		if ctxTimeout == 0 {
			ctx = context.NewCnclContext(nil)
		} else {
			ctx = context.NewExpiringCnclContext(nil, ctxTimeout, nil)
		}

		defer ctx.Cancel()

		return dfunc(ctx)
	case func(context.Context) error:
		var ctx context.Context

		if ctxTimeout == 0 {
			ctx = context.NewCnclContext(nil)
		} else {
			ctx = context.NewExpiringCnclContext(nil, ctxTimeout, nil)
		}

		defer ctx.Cancel()

		return dfunc(ctx)
	case func(context.Context) error:
		var ctx context.Context
		var canceller func()

		if ctxTimeout == 0 {
			ctx = gctx.Background()
		} else {
			ctx, canceller = gctx.WithTimeout(gctx.Background(), ctxTimeout)
		}

		if canceller != nil {
			defer canceller()
		}

		return dfunc(ctx)
	}

	return errors.New("Unknown context type")
}

type wopCloser struct {
	io.Writer
}

// Close does nothing.
func (wopCloser) Close() error {
	return nil
}
