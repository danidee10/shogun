package main

import (
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/fatih/color"
	"github.com/minio/cli"
	pkg {{quote .MainPackage }}
)


// vars ...
var (
 green = color.New(color.FgGreen)
 binHash = {{quote .Main.Hash}}
 binName = {{quote .Main.BinaryName }}
 Version = green.Sprintf("1.0.0")
 helpMessage = strings.TrimSpace(`{{.HelpFormat }}`)
 customHelpTemplate = `{{.CustomHelpTemplate}}`
)

func main(){
	app := cli.NewApp()
	app.Name = "{{lower .Main.BinaryName}}"
	app.Usage = "{{lower .Main.BinaryName}} [command]"
	app.Version = Version
	app.CustomAppHelpTemplate = helpMessage
	app.Description = "{{lower .Main.BinaryName}} generated by shogun"
	app.Action = mainAction

	app.Flags = []cli.Flag{
			cli.StringFlag{
				Name:  "t,timeout",
				Usage: "-t=4m to set timeout for function using context",
			},
	}

	app.Commands = []cli.Command{
		{
			Name:   "help",
			Action: helpAction,
			Flags:  []cli.Flag{
				cli.BoolFlag{
					Name:  "s,source",
					Usage: "-source to show source of command as well",
				},
			},
		},
	}

	app.RunAndExitOnError()
}

func helpAction(c *cli.Context) error {
	if c.NArg() == 0 {
		 fmt.Println(helpMessage)
		 return nil
	}

	return pkg.MainShogunHelp(
		c.Bool("source"),
		c.Args().First(),
		c.Args().Tail(),
		os.Stdin,
		wopCloser{Writer: os.Stdout},
	)
}

func mainAction(c *cli.Context) error {
	input := io.Reader(os.Stdin)

	flags, args := internals.FilterFlags(c.Args().Tail())
	if !stdinHasData() && len(args) != 0 {
		input = bytes.NewBufferString(strings.Join(args, " "))
	}

	tm, terr := time.ParseDuration(c.String("timeout"))
	if terr != nil {
		tm = 0
	}

	if err := pkg.MainShogunExecute(
		c.Args().First(),
		c.Args().Tail(),
		flags,
		input,
		wopCloser{Writer: os.Stdout},
		tm,
	); err != nil {
		if err == pkg.ErrNoDefault {
		 fmt.Println(helpMessage)
		 return nil
		}

		defer os.Exit(1)

		// Write error to stderr and only return err if attempt to write json failed.
		return json.NewEncoder(os.Stderr).Encode(struct{
			Err error `json:"error"`
			Method string `json:"method"`
			Args []string `json:"arguments"`
			Message string `json:"message"`
			Timeout time.Duration `json:"duration"`
		}{
			Err: err,
			Timeout: tm,
			Message: err.Error(),
			Args: c.Args().Tail(),
			Method: c.Args().First(),
		})
	}

	return nil
}

type wopCloser struct{
	io.Writer
}

// Close does nothing.
func (wopCloser) Close() error {
	return nil
}

// stdinHasData returns true/false if data is allocated into stdin.
func stdinHasData() bool {
	stat, err := os.Stdin.Stat()
	if err != nil {
		return false
	}

	if stat.Size() == 0 {
		return false
	}

	return true
}
