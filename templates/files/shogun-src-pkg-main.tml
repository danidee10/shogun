package main

import (
	"fmt"
	"io"
	"os"

	"github.com/fatih/color"
	"github.com/minio/cli"
	{{quote .MainPackage }}
)


// vars ...
var (
 green = color.New(color.FgGreen)
 binHash = {{quote .Main.Hash}}
 binName = {{quote .Main.BinaryName }}
 Version = green.Sprintf("1.0.0")
 helpTemplate = `{{.HelpFormat }}`
)

func main(){
	app := cli.NewApp()
	app.Name = "{{lower .Main.BinaryName}}"
	app.Usage = "{{lower .Main.BinaryName}} [command]"
  app.Version = Version
	app.Flags = []cli.Flag{}
	app.Description = "{{lower .Main.BinaryName}} generated by shogun"
  app.Action = mainAction

	app.Commands = []cli.Command{
		{
			Name:   "help",
			Action: helpAction,
			Flags:  []cli.Flag{
				cli.BoolFlag{
					Name:  "s,source",
					Usage: "-source to show source of command as well",
				},
				cli.BoolFlag{
					Name:  "f,full",
					Usage: "-full to show full description of command",
				},
			},
		},
	}

	app.RunAndExitOnError()
}

func helpAction(c *cli.Context) error {
	if c.NArg() == 0 {
		 fmt.Println(helpTemplate)
	 return nil
	}

	return pkg.MainShogunHelp(
		c.Bool("source"),
		c.Bool("full"),
		c.Args().First(),
		c.Args().Tail(),
		os.Stdin,
		wopCloser{Writer: os.Stdout},
	)
}

func mainAction(c *cli.Context) error {
	if c.NArg() == 0 {
	 fmt.Println(helpTemplate)
	 return nil
	}

	return pkg.MainShogunExecute(
		c.Args().First(),
		c.Args().Tail(),
		os.Stdin,
		wopCloser{Writer: os.Stdout},
	)
}

type wopCloser struct{
	io.Writer
}

// Close does nothing.
func (wopCloser) Close() error {
	return nil
}
