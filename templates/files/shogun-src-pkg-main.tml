package main

import (
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/fatih/color"
	"github.com/minio/cli"
	{{quote .MainPackage }}
)


// vars ...
var (
 green = color.New(color.FgGreen)
 binHash = {{quote .Main.Hash}}
 binName = {{quote .Main.BinaryName }}
 Version = green.Sprintf("1.0.0")
 helpMessage = strings.TrimSpace(`{{.HelpFormat }}`)
 customHelpTemplate = `{{.CustomHelpTemplate}}`
)

func main(){
	app := cli.NewApp()
	app.Name = "{{lower .Main.BinaryName}}"
	app.Usage = "{{lower .Main.BinaryName}} [command]"
  app.Version = Version
	app.CustomAppHelpTemplate = helpMessage
	app.Description = "{{lower .Main.BinaryName}} generated by shogun"
  app.Action = mainAction

	app.Flags = []cli.Flag{
			cli.StringFlag{
				Name:  "t,timeout",
				Usage: "-t=4m to set timeout for function using context",
			},
	}

	app.Commands = []cli.Command{
		{
			Name:   "help",
			Action: helpAction,
			Flags:  []cli.Flag{
				cli.BoolFlag{
					Name:  "s,source",
					Usage: "-source to show source of command as well",
				},
			},
		},
	}

	app.RunAndExitOnError()
}

func helpAction(c *cli.Context) error {
	if c.NArg() == 0 {
		 fmt.Println(helpMessage)
	 return nil
	}

	return pkg.MainShogunHelp(
		c.Bool("source"),
		c.Args().First(),
		c.Args().Tail(),
		os.Stdin,
		wopCloser{Writer: os.Stdout},
	)
}

func mainAction(c *cli.Context) error {
	if c.NArg() == 0 {
		 fmt.Println(helpMessage)
		 return nil
	}

	tm := makeDuration(c.String("timeout"), 0)
	if err := pkg.MainShogunExecute(
		c.Args().First(),
		c.Args().Tail(),
		os.Stdin,
		wopCloser{Writer: os.Stdout},
		tm,
	); err != nil {
		if jserr := json.NewEncoder(os.Stderr).Encode(struct{
			Err error `json:"error"`
			Method string `json:"method"`
		}{
			Err: err,
			Method: c.Args().First(),
		}); jserr != nil {
			return jserr
		}

		return err
	}

	return nil
}

type wopCloser struct{
	io.Writer
}

// Close does nothing.
func (wopCloser) Close() error {
	return nil
}

var elapso = regexp.MustCompile(`(\d+)(\w+)`)
func makeDuration(target string, def int) time.Duration {
	if !elapso.MatchString(target) {
		return time.Duration(def)
	}

	matchs := elapso.FindAllStringSubmatch(target, -1)
	if len(matchs) <= 0 {
		return time.Duration(def)
	}

	match := matchs[0]

	if len(match) < 3 {
		return time.Duration(def)
	}

	dur := time.Duration(convertToInt(match[1], def))
	mtype := match[2]

	switch mtype {
	case "s":
		return dur * time.Second
	case "mcs":
		return dur * time.Microsecond
	case "ns":
		return dur * time.Nanosecond
	case "ms":
		return dur * time.Millisecond
	case "m":
		return dur * time.Minute
	case "h":
		return dur * time.Hour
	default:
		return time.Duration(dur) * time.Second
	}
}

func convertToInt(target string, def int) int {
	fo, err := strconv.Atoi(target)
	if err != nil {
		return def
	}
	return fo
}
